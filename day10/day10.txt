1. 数组的API
	1. toString()
		作用 ：将数组中的元素转换为字符串返回
		返回值 ：字符串
		et :
			var arr = [1,2,3];
			var s = arr.toString();
			console.log(s); //"1,2,3"
	2. join()
		作用 ：将数组中的元素连接成一个字符串并返回
		返回值 ：字符串
		参数 ：可选，如果省略参数，默认元素之间使用,连接。
			可以给参数，指定元素之间的连接符
	3. reverse()
		作用 ：反转数组元素
		返回值 ：数组，会改变数组的原有结构
		et :
			var arr = [10,20,30];
			//[30,20,10]
			console.log(arr.reverse());
	4. sort()
		作用 ：对数组中元素进行排序
		返回值 ：数组，会改变数组原有结构
		参数 ：可选，自定义排序函数，
		       默认按照元素的Unicode码升序排列
		1. 升序的排序函数
			function sortAsc(a,b){
				return a-b;
			}
			arr.sort(sortAsc);
			解释 ：
			1. sortAsc函数接收两个参数，
				会自动将数组中相邻的两个元素传递给参数
			2. 如果返回值>0，交换两个元素的位置，否则不变
		2. 匿名函数作为排序函数，直接写在（）中
				arr.sort(function (a,b){ return b-a;});
2. 数组的进出栈操作:02-air-Apl.html
		栈结构 ：遵循先进后出原则
		栈操作可以快速操作数组中的头尾元素
		1. push(data)
				入栈操作，向数组的尾部添加元素，可以是一个或多个
				返回值 ：返回新数组的长度
				 et :
						arr[arr.length] = 'hello';
						arr.push("Hi");
						arr.push(10,20); //多个数据之间只用,隔开
		2. pop()
				出栈操作，删除数组尾部元素
				返回值 ：返回被删除的元素
		3. unshift()
				向数组头部添加一个或多个元素
				返回最终数组的长度
		4. shift()
				删除数组中头部元素
				返回被删除的元素
3. 二维数组:
		数组中每个元素又是一个数组
		语法 ：
			var arr = [[10,5,3],[20,23],[30,13]];
			console.log(arr.length); //3
			//向二维数组中添加元素
			arr[1][2] = 50;
			//访问二维数组中元素
			console.log(arr[2][0]); //30
			et :
				var books = [
					["西游记","三国演义","红楼梦","水浒传"];
					["西游记","三国演义","红楼梦","水浒传"];
				];
		练习 ：随意录入一个数字，将数字转换成对应的二进制 #03-array-exer.html
						并输出
						10  转换二进制 ：除2取余,倒序排列余数
						10  / 2 = 5 .....0
						5   / 2	= 2 .....1
						2	/ 2 = 1 .....0
						1	/ 2 = 0 .....1
						10的二进制 1010  
						0 * 2（0）+ 1 * 2（1）+ 0 * 2（2） + 1 * 2（3）


JS的内置对象
	1. 对象 ：
		对象由属性和方法组成，可以使用点语法访问对象的
		属性和方法 
			et :
				var arr = [1,2,3];
				arr.length; //访问属性
				arr.push(100); //访问方法
	2. 对象分类 ：
		1. 内置对象 ：
				由ECMAScript规定，例如数组 字符串 Math Date...
		2. BOM 对象 ：
				浏览器对象模型，由浏览器各大厂商制定，提供
				一系列与浏览器操作相关的对象
		3. DOM 对象 ：
				文档对象模型，提供一系列规范的操作文档的对象
		4. 自定义对象
	3. 内置对象分类 ：
		1. String 对象
			1. 创建 ：
				var str1 = "hello";
				var str2 = new String("world");
			2. 属性和方法
				1. 属性 ：
						length : 获取字符串长度
							var s = "hello";
							var s2 = "h e l l o";
							s.length; //5
							s2.length;//9
				2. 方法 ：
					1. 英文字符串的大小写转换
							1. toUpperCase()转换全大写字母
							2. toLowerCase()转换全小写字母
							注意 ：
								该方法会返回新的字符串，不影响原始字符串
							练习 ：
								1. 创建数组，保存数字和字母
								2. 生成随机6位的验证码
										从数组中随机抽取6位元素，组成验证码
										随机数 ：Math.random();
										生成[0,1)之间的随机数
								3. 将生成的验证码提示给用户输入
								4. 验证用户输入是否正确
										在不区分大小写的情况下，只要输入
										正确，都提示"验证成功"
					2. 获取字符或字符编码
						1. 获取指定位置的字符
								charAt(index);
						2. 获取指定位置的字符对应的编码
								charCodeAt(index);


JS的内置对象
	1. 对象 ：
		对象由属性和方法组成，可以使用点语法访问对象的
		属性和方法 
			et :
				var arr = [1,2,3];
				arr.length; //访问属性
				arr.push(100); //访问方法
	2. 对象分类 ：
		1. 内置对象 ：
				由ECMAScript规定，例如数组 字符串 Math Date...
		2. BOM 对象 ：
				浏览器对象模型，由浏览器各大厂商制定，提供
				一系列与浏览器操作相关的对象
		3. DOM 对象 ：
				文档对象模型，提供一系列规范的操作文档的对象
		4. 自定义对象
	3. 内置对象分类 ：
		1. String 对象
			1. 创建 ：
				var str1 = "hello";
				var str2 = new String("world");
			2. 属性和方法
				1. 属性 ：
						length : 获取字符串长度
							var s = "hello";
							var s2 = "h e l l o";
							s.length; //5
							s2.length;//9
				2. 方法 ：
					1. 英文字符串的大小写转换
							1. toUpperCase()转换全大写字母
							2. toLowerCase()转换全小写字母
							注意 ：
								该方法会返回新的字符串，不影响原始字符串
							练习 ：
								1. 创建数组，保存数字和字母
								2. 生成随机6位的验证码
										从数组中随机抽取6位元素，组成验证码
										随机数 ：Math.random();
										生成[0,1)之间的随机数
								3. 将生成的验证码提示给用户输入
								4. 验证用户输入是否正确
										在不区分大小写的情况下，只要输入
										正确，都提示"验证成功"
					2. 获取字符或字符编码
						1. 获取指定位置的字符
								charAt(index);
						2. 获取指定位置的字符对应的编码
								charCodeAt(index);
					3. 检索字符串
						1. indexOf(value[,fromIndex])
								作用 ：获取指定字符的下标
								参数 ：
									1. value : 必填，设置查找字符
									2. fromIndex : 可选参数，设置从哪个下标
											位置开始查找，默认值为0
								返回值 ：
									返回value第一次出现的下标位置,查找失败，
									返回-1
						2. lastIndexOf(value[,fromIndex])
								作用 ：查找指定字符的下标
								返回值 ：value最后一次出现的下标
						注意 ： 大小写敏感
					4. 截取字符串
						1. substring(startIndex,endIndex)
							根据下标截取字符串 [startIndex,endIndex)
							et :
								var a = "hello";
								a.substring(0,1);
							返回下标范围内的字符串
							注意 ：
								endIndex可以省略,省略时,截至字符串末尾
						练习 1：
							从给定的邮箱 ：
								zhangsan@sina.com
							1. 提取用户名
							2. 提取服务商
						练习 2：
							从给定的身份证号中，提取出生年月日
								100233186012057663
					5. 分割字符串
						1. split(param)
							参数 ：指定分割符
							返回值 ：返回数组，存放分割完成后的小字符串
							注意 ：
								指定的分隔符必须是字符串中存在字符，否则
								不会对原字符串分割。
							练习 ：
								1045_5&2033_6&0112_10
								分割商品数量与ID
								商品ID  商品数量
								1045				5	
					6. 模式匹配
						1. 配合正则表达式实现查找和替换字符串的作用
						2. 正则表达式
								语法 ：/正则格式/修饰符
								修饰符 ：
									i : ignorecase 忽略大小写
									g : global 全局匹配
								et :
									var reg1 = /长高/ig ;
									var reg2 = /\d/ig;
						3. 字符串方法 ：
							1. replace(substr/RegExp,newStr)
								根据给出的substr或RegExp查找对应字符串，
								并将其替换为newStr;
								返回值:返回替换后的新字符串,不影响原始
								数据
							2. match(substr/RegExp)
								根据指定的substr或RexExp匹配对应字符串
								返回数组，数组中存放匹配结果

							练习 ：
								微软是一家国际大公司，Microsoft的官网上
								有自己公司microsoft的logo。MicRosoft的官网上
								有自己公司microsoft的logo

								将所有的Microsoft都使用中文表示，
								输出替换了多少次

								
							
				



					

								


		
			







		